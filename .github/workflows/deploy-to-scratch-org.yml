# Workflow to install Node and SFDX so we can build a scratch org and deploy to it

name: Deploy To Scratch Org

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch and if something changes in our metadata directory
  push:
    branches: [ master, dev, feature/** ]
    paths:
      - 'force-app/**'
  pull_request:
    types: [opened, synchronized, reopened]
    branches: [ dev ]
    paths:
      - 'force-app/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    # helpful doc: https://developer.salesforce.com/blogs/2020/01/using-salesforce-dx-with-github-actions
    steps:
      # install sfdx & source scanner plugin
      - name: Install SFDX (Salesforce CLI)
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
          ./sfdx-cli/install
          sfdx plugins:install @salesforce/sfdx-scanner

      - name: Output SFDX Version
        run: |
          sfdx --version
          sfdx force
          sfdx plugins

      # checkout the code in the pull request or commit
      - name: Checkout Code
        uses: actions/checkout@v2

      # lint javascript for lwc's
      - name: Lint Lightning Web Components
        run: sfdx force:lightning:lint --exit .force-app/main/default/lwc

      # source scanner - ignore Test classes
      # https://forcedotcom.github.io/sfdx-scanner/en/scanner-commands/run/
      # ,!./**/*Test.cls
      - name: Static Apex Class Analysis
        run: |
          sfdx scanner:run --target=force-app/main/default --category=!Documentation  --format=json --outfile=scan.json --severity-threshold=2
          echo "scan.json = $(cat scan.json)"

      # authenticate to SF dev hub
      - name: Authenticate to Salesforce Dev Hub
        run: |
          sfdx force:auth:jwt:grant --clientid ${{ secrets.HUB_ORG_CLIENTID }} --username ${{ secrets.HUB_ORG_USER }} --jwtkeyfile sf.key --setalias hub --setdefaultdevhubusername
          sfdx force:org:list

      # create a scratch org
      - name: Create a Scratch Org
        run: |
          sfdx force:org:create -f config/project-scratch-def.json --durationdays 1 --setalias scratch --setdefaultusername --targetdevhubusername hub adminEmail=quentinf@gmail.com username="quentinf@github.com.$GITHUB_RUN_ID.$GITHUB_RUN_NUMBER" --wait 10
          sfdx force:user:password:generate -u scratch
          sfdx force:user:display -u scratch --json > sfuser.json
          echo "sfuser.json = $(cat sfuser.json)"

      # parse out info we'll need to login to the sf scratch org
      - name: Parse Scratch Org Login Info
        id: scratchorg
        run: |
          display=$(cat sfuser.json | jq '.result')
          instanceUrl=$(jq -r  '.instanceUrl' <<< "${display}")
          username=$(jq -r  '.username' <<< "${display}")
          password=$(jq -r  '.password' <<< "${display}")
          accessToken="$(jq -r .accessToken <<< "${display}")"
          echo "instanceUrl = ${instanceUrl}"
          echo "username = ${username}"
          echo "password = ${password}"
          echo "accessToken = ${accessToken}"
          echo "::set-output name=loginurl::${instanceUrl}?un=${username}&pw="
          echo "::set-output name=password::${password}"
          echo "::set-output name=accesstoken::${accessToken}"

      # https://github.com/marketplace/actions/execute-javascript-inline
      # To use latest action, specify "release-master" instead of "v0.0.2"
      - name: Build Scratch Org Login
        uses: satackey/action-js-inline@v0.0.2
        id: getdata
        with:
          script: |
            const core = require('@actions/core');
            console.log(`pwd: ${{ steps.scratchorg.outputs.password }}`);
            console.log(`loginurl: ${{ steps.scratchorg.outputs.loginurl }}`);
            const encodedpwd = encodeURI(`${{ steps.scratchorg.outputs.password }}`);
            console.log("encodedpwd = " + encodedpwd);
            const sfloginurl = `${{ steps.scratchorg.outputs.loginurl }}` + encodedpwd;
            console.log("sfloginurl = " + sfloginurl);
            // urls are supported in markdown only - no html
            const sfloginmsg = "You can test PR feature in this [Salesforce Scratch Org](" + sfloginurl + ")";
            core.setOutput('sfloginmsg', sfloginmsg);

      # install required package in the scratch org
      # healthcloud package version id = 04t4W000002g0as
      # http://industries.force.com/healthcloud
      - name: Install required Package in Scratch Org
        run: echo 'coming soon!'
        # run: sfdx force:package:install --package 04t4W000002g0as -u scratch --securitytype AdminsOnly --wait 35 --noprompt

      # deploy code to the scratch org
      - name: Deploy Code to Scratch Org
        run: sfdx force:source:deploy -u scratch -x manifest/package.xml

      # assign the permission set
      - name: Assign Permission Set to Scratch Org User
      #  run: sfdx force:user:permset:assign -n PermSet -u scratch

      # run all tests in the scratch org
      - name: Run All Tests in Scratch Org
        run: sfdx force:apex:test:run -u scratch --testlevel RunLocalTests --codecoverage --resultformat human
# TODO: DOES THIS RETURN TEST ERRORS ABOVE? IF NOT, MAYBE SWITCH BACK TO JSON AND PARSE THEM OUT
#        run: |
#          sfdx force:apex:test:run -u scratch --testlevel RunLocalTests --codecoverage --resultformat json > sftestresults.json
#          echo "sftestresults.json = $(cat sftestresults.json)"


      # check code coverage for all classes to make all are > 85%
      - name: Check Apex Code Coverage > 85%
        run: |
          sfdx force:data:soql:query -q 'select ApexTestClass.Name, TestMethodName, ApexClassOrTrigger.Name, NumLinesUncovered, NumLinesCovered from ApexCodeCoverageAggregate order by ApexClassOrTrigger.Name' -u scratch -t -r json > testcoverage.json
          echo "testcoverage.json = $(cat testcoverage.json)"

      # send notification to Teams channel using the ms-teams-notification action
      # https://github.com/marketplace/actions/microsoft-teams-notification
      - name: Send Notification to Teams Channel
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: ${{ steps.getdata.outputs.sfloginmsg }}
          notification-color: 28a745
          timezone: America/Denver

      # delete the scratch org
      #- name: Delete the Scratch Org
      #  run: sfdx force:org:delete -u scratch --noprompt
