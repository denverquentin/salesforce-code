# GitHub Action to install SFDX and the SFDX Scanner so we can:
# - analyze the Apex code for security and performance issues
# - lint all javascript in all components
# - build a scratch org and deploy all metadata to it
# - run all unit tests
# - delete the scratch org when done

name: Validate Commit

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch and if something changes in our metadata directory
  push:
    branches: [ master, dev, feature/** ]
    paths:
#      - 'force-app/**'
# commented out above until we get the cicd process finished - maybe leave this off forever
  pull_request:
    types: [opened, synchronized, reopened]
    branches: [ master, dev, feature/** ]
    paths:
#      - 'force-app/**'
# commented out above until we get the cicd process finished - maybe leave this off forever

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    # helpful docs: https://developer.salesforce.com/blogs/2020/01/using-salesforce-dx-with-github-actions
    # https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli.htm#sfdx_setup_install_cli_npm
    steps:
      # checkout the code in the pull request or commit
      - name: Checkout Code
        uses: actions/checkout@v3

      # install sfdx & source scanner plugin
      - name: Install SFDX (Salesforce CLI)
        id: install-sfdx
        run: |
          node -v
          npm -v
          npm install --global sfdx-cli
          sfdx plugins:install @salesforce/sfdx-scanner

      - name: Output SFDX Version
        id: output-sfdx
        run: |
          sfdx --version
          sfdx force
          sfdx plugins

      # lint javascript for lwc's - need the first 2 npm commands to get
      # the correct devDependencies from the package.json installed
      - name: Lint LWC
        id: lint-lwc
        run: |
          npm ci
          npm list --dev
          sfdx scanner:run --target='**/lwc/**/*.js,**/aura/**/*.js' --engine retire-js
          sfdx scanner:run --target='**/lwc/**/*.js,**/aura/**/*.js' --engine eslint --eslintconfig=force-app/main/default/lwc/.eslintrc.json

      # apex source scanner
      # https://forcedotcom.github.io/sfdx-scanner/en/scanner-commands/run/
      # rules are defined in the pmd/ruleset.xml
      # all possible rules are documented here: https://pmd.github.io/latest/pmd_rules_apex.html
      - name: Apex Source Scanner
        id: analyze-static
        run: |
          sfdx scanner:run --target=force-app/main/default --engine pmd --pmdconfig='pmd/ruleset.xml' --format=json --severity-threshold=2 --outfile=analyze-static.json || true
          if test -f analyze-static.json; then
            echo "ERROR: FIX THE PROBLEMS LISTED BELOW"
            echo "analyze-static.json = $(jq . analyze-static.json)"
            exit 1
          fi

      # use the source scanner to look for unused classes and methods
      # https://developer.salesforce.com/blogs/2023/02/boost-code-performance-with-salesforce-code-analyzer
      - name: Apex Graph Engine
        id: analyze-graph
        run: |
          sfdx scanner:run --target=force-app/main/default --projectdir ./ --engine sfge --format=json --outfile=analyze-graph.json || true
          if test -f analyze-graph.json; then
            echo "ERROR: FIX THE PROBLEMS LISTED BELOW"
            echo "analyze-graph.json = $(jq . analyze-graph.json)"
            exit 1
          fi

      # authenticate to SF dev hub
      - name: Authenticate to Salesforce Dev Hub
        id: authenticate-devhub
        run: |
          echo "${{ secrets.HUB_ORG_PRIVATE_KEY }}" > server.key
          sfdx force:auth:jwt:grant --clientid ${{ secrets.HUB_ORG_CLIENTID }} --username ${{ secrets.HUB_ORG_USER }} --jwtkeyfile server.key --setalias hub --setdefaultdevhubusername --json > auth.json || true
          echo "auth.json = $(jq . auth.json)"
          status=$(jq -r '.status' auth.json)
          if [ $status -ne 0 ]; then
            msg=$(jq -r '.message' auth.json)
            echo "error = $msg"
            exit 1
          else
            sfdx force:org:list
          fi

      # create a scratch org
      - name: Create a Scratch Org
        id: create-scratchorg
        run: |
          sfdx org create -f config/project-scratch-def.json --durationdays 1 --setalias validate --setdefaultusername --targetdevhubusername hub adminEmail=quentinf@gmail.com username="quentinf@github.com.$GITHUB_RUN_ID.$GITHUB_RUN_NUMBER" --wait 10 --json > scratch.json || true
          echo "scratch.json = $(jq . scratch.json)"
          status=$(jq -r '.status' scratch.json)
          if [ $status -ne 0 ]; then
            msg=$(jq -r '.message' scratch.json)
            echo "error = $msg"
            echo "error = ${{ steps.create-scratchorg.outputs.error }}"
            exit 1
          else
            sfdx force:user:password:generate -u validate
            sfdx force:user:display -u validate --json > sfuser.json
            echo "sfuser.json = $(jq . sfuser.json)"
          fi

      # deploy code to the scratch org
      - name: Deploy Code
        id: deploy-source
        run: |
          sfdx force:source:deploy -u validate -x manifest/package.xml --wait 10 --json > deploy.json || true
          echo "deploy.json = $(jq . deploy.json)"
          status=$(jq -r '.status' deploy.json)
          if [ $status -ne 0 ]; then
            msg=$(jq -r '.message' deploy.json)
            echo "error = $msg"
            echo "error = ${{ steps.deploy-source.outputs.error }}"
            exit 1
          fi

      # assign the permission set
      - name: Assign Permission Set to Scratch Org User
        id: assign-permission-set
        run: sfdx force:user:permset:assign -n PermSet -u validate

      # run all tests in the scratch org
      - name: Run All Tests in Scratch Org
        id: run-tests
        run: |
          sfdx force:apex:test:run -u validate --testlevel RunLocalTests --codecoverage --resultformat json > tests.json || true
          echo "tests.json = $(jq . tests.json)"
          status=$(jq -r '.status' tests.json)
          if [ $status -ne 0 ]; then
            result=$(cat tests.json | jq '.result')
            msg=""
            echo "error(s) below"
            for row in $(echo "${result}" | jq -r '.tests[] | @base64'); do
              _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
              }
              if [ "$(_jq '.Message')" != "null" ]; then
                echo "error = $(_jq '.Message')"
                echo "stack trace = $(_jq '.StackTrace')"
                echo "-----------------------"
                msg+="$(_jq '.Message')\ $(_jq '.StackTrace')\ "
              fi
            done
            exit 1
          fi

      # verify code coverage is good
      - name: Verify Apex Class Code Coverage > 85%
        id: verify-test-coverage
        run: |
          sfdx force:apex:execute -f scripts/check-test-coverage.apex -u validate --json > testcoverage.json
          echo "testcoverage.json = $(jq . testcoverage.json)"

      # delete the scratch org
      - name: Delete the Scratch Org
        run: sfdx org delete -u validate --noprompt
